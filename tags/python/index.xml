<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on xzy&#39;s blog</title>
    <link>https://xzywisdili.github.io/tags/python/</link>
    <description>Recent content in Python on xzy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 12 Nov 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://xzywisdili.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>光棍节初探 TensorFlow（一）：数据集的预处理</title>
      <link>https://xzywisdili.github.io/post/2017/11/12/%E5%85%89%E6%A3%8D%E8%8A%82%E5%88%9D%E6%8E%A2-tensorflow%E4%B8%80%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E9%A2%84%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://xzywisdili.github.io/post/2017/11/12/%E5%85%89%E6%A3%8D%E8%8A%82%E5%88%9D%E6%8E%A2-tensorflow%E4%B8%80%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E9%A2%84%E5%A4%84%E7%90%86/</guid>
      <description>11 月 11 日这天注定对我具有了一定的意义。不是因为它是购物狂欢节或光棍节，而是因为在这一天，我第一次尝试使用 TensorFlow 搭建了一个简单的神经网络。我希望用几篇文章记录这个过程。
最近在读 Fundamentals of Deep Learning 这本书。我选择它的原因是讲解得通俗易懂，又会直白地点出重点内容。然而当我读到第三章「Implementing Neural Networks in TensorFlow」时，整个人就好像懵了一样。对于一个从来没接触过 TensorFlow 的人来说，是难以通过看代码直接理解 Graph, Session 等等这些新概念的。于是联想到程序员的思维修炼里面提到的「SQ3R 阅读法」，赶紧先放下这本书，到网上找其他关于 TensorFlow 的资料，值得推荐的是： - TensorFlow 官方文档中文版 - TF Girls「TensorFlow Tutorial」修炼指南（这老师很幽默） - youtube 地址 - bilibili 地址
没想到我居然也能一天完成了一个基础的神经网络（虽然是从下午 1 点到晚上 2 点）。现在到了「SQ3R 阅读法」中的很重要的 Recite（复述）这步———把这个过程写成文章发布到博客里。
所使用的数据集来自 The Street View House Numbers (SVHN) Dataset，这是一个关于识别街景照片中出现的数字的数据集。
读取数据 首先下载 Format 2 格式的数据，即 .mat 格式的数据。我们先在 iPython 里面探索一下数据：
In[1]: from scipy.io import loadmat as load In[2]: train_data = load(&#39;data/train_32x32.</description>
    </item>
    
    <item>
      <title>「翻译」如何用 Python 画出像 FiveThirtyEight 那么棒的图表</title>
      <link>https://xzywisdili.github.io/post/2017/10/15/%E7%BF%BB%E8%AF%91%E5%A6%82%E4%BD%95%E7%94%A8-python-%E7%94%BB%E5%87%BA%E5%83%8F-fivethirtyeight-%E9%82%A3%E4%B9%88%E6%A3%92%E7%9A%84%E5%9B%BE%E8%A1%A8/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://xzywisdili.github.io/post/2017/10/15/%E7%BF%BB%E8%AF%91%E5%A6%82%E4%BD%95%E7%94%A8-python-%E7%94%BB%E5%87%BA%E5%83%8F-fivethirtyeight-%E9%82%A3%E4%B9%88%E6%A3%92%E7%9A%84%E5%9B%BE%E8%A1%A8/</guid>
      <description>如果你经常读数据科学领域的文章的话，你可能会偶然发现 FiveThirtyEight 上的内容，然后被他们惊艳的图表迷住。于是你自己也想制作如此出色的可视化作品，于是去 Quora 和 Reddit 上问怎么做。你收到了几个回答，但是这些回答都很模糊。你还是不知道怎么搞定这样的图表。
在这篇博文中，我会手把手地帮你。通过使用 Python 的 matplotlib 和 pandas 库，我们会发现复制出 FTE 可视化作品的核心部分是多么轻松写意。
这是我们最初的图：
在这篇文章的结束，我们会做到这样：
为了跟上，你需要至少了解一些 Python 的基础知识。如果你知道方法和属性之间的区别，那我们就可以开始了。
介绍数据集 我们将要处理的数据集展现的事从 1970 年到 2011 年在美国授予女性的学位比例。我们使用的数据集是数据科学家 Randal Olson 从国家教育统计中心采集的。
如果你想通过自己写代码来学习，你可以从 Randal 的博客下载数据集。如果想节省时间的话，你可以跳过下载文件，直接把链接甩给 pandas 的 read_csv() 函数。在下面的代码中，我们做了： - 导入 pandas 模块 - 把数据集的链接通过字符串保存在变量 direct_link 中 - 通过 read_csv() 读取数据，并把内容保存在 women_majors - 使用 info() 方法展示数据集的基本信息，了解行数和列数，同时找一找有没有缺失的值 - 使用 head() 方法显示出数据集的前 5 行可以帮助我们更好地理解数据集的结构
import pandas as pd direct_link = &#39;http://www.randalolson.com/wp-content/uploads/percent-bachelors-degrees-women-usa.csv&#39; women_majors = pd.</description>
    </item>
    
    <item>
      <title>「翻译」如何用 Python 画出像 FiveThirtyEight 那么棒的图表</title>
      <link>https://xzywisdili.github.io/post/2017/10/15/%E7%BF%BB%E8%AF%91%E5%A6%82%E4%BD%95%E7%94%A8-python-%E7%94%BB%E5%87%BA%E5%83%8F-fivethirtyeight-%E9%82%A3%E4%B9%88%E6%A3%92%E7%9A%84%E5%9B%BE%E8%A1%A8/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://xzywisdili.github.io/post/2017/10/15/%E7%BF%BB%E8%AF%91%E5%A6%82%E4%BD%95%E7%94%A8-python-%E7%94%BB%E5%87%BA%E5%83%8F-fivethirtyeight-%E9%82%A3%E4%B9%88%E6%A3%92%E7%9A%84%E5%9B%BE%E8%A1%A8/</guid>
      <description>如果你经常读数据科学领域的文章的话，你可能会偶然发现 FiveThirtyEight 上的内容，然后被他们惊艳的图表迷住。于是你自己也想制作如此出色的可视化作品，于是去 Quora 和 Reddit 上问怎么做。你收到了几个回答，但是这些回答都很模糊。你还是不知道怎么搞定这样的图表。
在这篇博文中，我会手把手地帮你。通过使用 Python 的 matplotlib 和 pandas 库，我们会发现复制出 FTE 可视化作品的核心部分是多么轻松写意。
这是我们最初的图：
在这篇文章的结束，我们会做到这样：
为了跟上，你需要至少了解一些 Python 的基础知识。如果你知道方法和属性之间的区别，那我们就可以开始了。
介绍数据集 我们将要处理的数据集展现的事从 1970 年到 2011 年在美国授予女性的学位比例。我们使用的数据集是数据科学家 Randal Olson 从国家教育统计中心采集的。
如果你想通过自己写代码来学习，你可以从 Randal 的博客下载数据集。如果想节省时间的话，你可以跳过下载文件，直接把链接甩给 pandas 的 read_csv() 函数。在下面的代码中，我们做了： - 导入 pandas 模块 - 把数据集的链接通过字符串保存在变量 direct_link 中 - 通过 read_csv() 读取数据，并把内容保存在 women_majors - 使用 info() 方法展示数据集的基本信息，了解行数和列数，同时找一找有没有缺失的值 - 使用 head() 方法显示出数据集的前 5 行可以帮助我们更好地理解数据集的结构
import pandas as pd direct_link = &#39;http://www.randalolson.com/wp-content/uploads/percent-bachelors-degrees-women-usa.csv&#39; women_majors = pd.</description>
    </item>
    
    <item>
      <title>用 Python 解决数据结构与算法题 01</title>
      <link>https://xzywisdili.github.io/post/2017/10/05/%E7%94%A8-python-%E8%A7%A3%E5%86%B3%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98-01/</link>
      <pubDate>Thu, 05 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://xzywisdili.github.io/post/2017/10/05/%E7%94%A8-python-%E8%A7%A3%E5%86%B3%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98-01/</guid>
      <description>这是 Python 解决算法问题的第一期。我想以后每期写出三道题。本人是医学生，没有上过任何数据结构和算法课，对于解决算法题也纯属个人的课余兴趣爱好。还希望各位真正的大牛不吝赐教。我会继续坚持下去的。
设计一个有 getMin 功能的栈 题目：实现一个特殊的栈，在实现栈的基本功能的基础上，再实现返回栈中最小元素的操作。 要求： 1. pop，push，get_min 操作的时间复杂度都是$O(1)$。 2. 设计的栈类型可以使用线程的栈结构。
首先先使用 Python 实现一个简单的栈：
class Stack: __slots__ = (&#39;__items&#39;) def __init__(self): self.__items = [] def is_empty(self): return self.__items == [] def peek(self): return self.__items[-1] def size(self): return len(self.__items) def push(self, new_value): self.__items.append(new_value) def pop(self): return self.__items.pop()  这个问题很简单，解决方法就是使用两个栈，一个用来存放数据，一个用来记录最小值即可。 在 push 新数据的时候，需要和存放最小值的栈 stack_min 栈顶的数据相比较。如果新数据比它小或者等于它，那么也把新数据 push 进 stack_min 的栈顶就可以了。 在 pop 的时候，需要检查输出的数据是否也存在在 stack_min 的栈顶，如果也存在的话，说明这个数据是栈内的最小值，也需要把它从 stack_min 中 pop 出去。
class MyStack(object): def __init__(self): self.</description>
    </item>
    
  </channel>
</rss>